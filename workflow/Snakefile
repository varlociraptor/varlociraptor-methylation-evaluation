# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.


configfile: "config/config.yaml"


read_type = config["read_type"]
sample_config = config["sample"]


reads = (
    "resources/example-reads-pacbio"
    if read_type == "PacBio"
    else "resources/example-reads-illumina"
)


rule get_genome:
    output:
        "resources/genome.fasta",
    params:
        species=sample_config["species"],
        datatype=sample_config["datatype"],
        build=sample_config["build"],
        release=sample_config["release"],
    log:
        "logs/get_genome.log",
    cache: "omit-software"  # save space and time with between workflow caching (see docs)
    wrapper:
        "v2.3.2/bio/reference/ensembl-sequence"


rule get_chromosome:
    output:
        "resources/chr1.fasta",
    params:
        species=sample_config["species"],
        datatype=sample_config["datatype"],
        build=sample_config["build"],
        release=sample_config["release"],
        chromosome=sample_config["chromosome"],
    log:
        "logs/get_chromosome.log",
    cache: "omit-software"  # save space and time with between workflow caching (see docs)
    wrapper:
        "v2.3.2/bio/reference/ensembl-sequence"


rule find_candidates:
    input:
        "resources/example-genome.fasta",
    output:
        "resources/example-candidates.bcf",
    log:
        "logs/find_candidates.log",
    conda:
        "envs/rust.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- methylation-candidates {params.pipeline_path}{input} {params.pipeline_path}/{output}
        """


rule sam_to_bam:
    input:
        reads + ".sam",
    output:
        reads + ".bam",
    log:
        "logs/sam_to_bam.log",
    conda:
        "envs/samtools.yaml"
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        "samtools view -bS {params.pipeline_path}{input} > {params.pipeline_path}/{output}"


rule compute_meth_probs:
    input:
        fasta="resources/example-genome.fasta",
        bam=reads + ".bam",
        candidates="resources/example-candidates.bcf",
    output:
        "resources/observations.bcf",
    log:
        "logs/copute.log",
    conda:
        "envs/rust.yaml"
    params:
        pipeline_path=config["pipeline_path"],
        read_type=config["read_type"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- preprocess variants {params.pipeline_path}/{input.fasta} --candidates {params.pipeline_path}/{input.candidates} --bam {params.pipeline_path}/{input.bam} --read-type {params.read_type}> {params.pipeline_path}/{output}
        """


rule convert_to_vcf:
    input:
        "resources/observations.bcf",
    output:
        "resources/observations.vcf",
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf.log",
    shell:
        """
        bcftools view {input} > {output}
        """
