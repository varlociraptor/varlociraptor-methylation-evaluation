# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.


configfile: "config/config.yaml"


read_type = config["read_type"]
sample_config = config["sample"]
sra_accession = config["sra_accession"]


aligned_bam_reads = (
    "resources/aligned-reads-pacbio.bam"
    if read_type == "PacBio"
    else "resources/aligned-reads-illumina.bam"
)

aligned_bam_reads_index = (
    "resources/aligned-reads-pacbio.bam.bai"
    if read_type == "PacBio"
    else "resources/aligned-reads-illumina.bam.bai"
)

aligned_sam_reads = (
    "resources/aligned-reads-pacbio.sam"
    if read_type == "PacBio"
    else "resources/aligned-reads-illumina.sam"
)


rule get_genome:
    output:
        "resources/genome.fasta",
    params:
        species=sample_config["species"],
        datatype=sample_config["datatype"],
        build=sample_config["build"],
        release=sample_config["release"],
    log:
        "logs/get_genome.log",
    cache: "omit-software"  # save space and time with between workflow caching (see docs)
    wrapper:
        "v2.3.2/bio/reference/ensembl-sequence"


rule get_chromosome:
    output:
        "resources/chr1.fasta",
    params:
        species=sample_config["species"],
        datatype=sample_config["datatype"],
        build=sample_config["build"],
        release=sample_config["release"],
        chromosome=sample_config["chromosome"],
    log:
        "logs/get_chromosome.log",
    cache: "omit-software"  # save space and time with between workflow caching (see docs)
    wrapper:
        "v2.3.2/bio/reference/ensembl-sequence"


rule genome_index:
    input:
        "resources/genome.fasta",
    output:
        "resources/genome.fasta.fai",
    log:
        "logs/genome_index.log",
    conda:
        "envs/samtools.yaml"
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        samtools index {params.pipeline_path}/{input}
        """


rule find_candidates:
    input:
        "resources/genome.fasta",
    output:
        "resources/candidates.bcf",
    log:
        "logs/find_candidates.log",
    conda:
        "envs/rust.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- methylation-candidates {params.pipeline_path}{input} {params.pipeline_path}{output}
        """


rule candidates_to_vcf:
    input:
        "resources/candidates.bcf",
    output:
        "resources/candidates.vcf",
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf.log",
    shell:
        """
        bcftools view {input} > {output}
        """


rule get_fastq_pe_gz:
    output:
        "resources/{sra_accession}_1.fastq.gz",
        "resources/{sra_accession}_2.fastq.gz",
    log:
        "logs/pe/{sra_accession}.gz.log",
    params:
        extra="--skip-technical",
    threads: 6
    wrapper:
        "v2.6.0/bio/sra-tools/fasterq-dump"


rule align_reads:
    input:
        fasta="resources/genome.fasta",
        reads1=expand("resources/{sra_accession}_1.fastq.gz", sra_accession=sra_accession),
        reads2=expand("resources/{sra_accession}_2.fastq.gz", sra_accession=sra_accession),
    
    output:
        aligned_sam_reads,
    conda:
        "envs/bwa-meth.yaml"
    log:
        "logs/align_reads.log",
    shell:
        """
        bwameth.py index-mem2 {input.fasta}
        bwameth.py --reverence {input.fasta} {input.reads1} {input.reads2} > {output}
        """


rule aligned_reads_to_bam:
    input:
        aligned_sam_reads,
    output:
        aligned_bam_reads,
    log:
        "logs/aligned_reads_to_bam.log",
    conda:
        "envs/samtools.yaml"
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        samtools view -bS {params.pipeline_path}{input} > {params.pipeline_path}/{output}
        """


rule aligned_reads_index:
    input:
        aligned_bam_reads,
    output:
        aligned_bam_reads_index,
    log:
        "logs/aligned_reads_to_bam.log",
    conda:
        "envs/samtools.yaml"
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        samtools index {params.pipeline_path}/{input}
        """


rule compute_meth_observations:
    input:
        aligned_bam_reads_index,
        fasta="resources/genome.fasta",
        bam=aligned_bam_reads,
        candidates="resources/candidates.bcf",
    output:
        "results/normal.bcf",
    log:
        "logs/copute.log",
    conda:
        "envs/rust.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        read_type=config["read_type"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- preprocess variants {params.pipeline_path}{input.fasta} --candidates {params.pipeline_path}{input.candidates} --bam {params.pipeline_path}{input.bam} --read-type {params.read_type}> {params.pipeline_path}{output}
        """


rule observations_to_vcf:
    input:
        "results/normal.bcf",
    output:
        "results/normal.vcf",
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf.log",
    shell:
        """
        bcftools view {input} > {output}
        """


rule call_methylation:
    input:
        preprocess_obs="results/normal.bcf",
        scenario="resources/scenario.yaml",
    output:
        "results/calls.bcf",
    log:
        "logs/copute.log",
    conda:
        "envs/rust.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        read_type=config["read_type"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- call variants generic  --scenario {params.pipeline_path}{input.scenario} --obs normal={params.pipeline_path}{input.preprocess_obs} > {params.pipeline_path}/{output}
        """


rule calls_to_vcf:
    input:
        "results/calls.bcf",
    output:
        "results/calls.vcf",
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf.log",
    shell:
        """
        bcftools view {input} > {output}
        """
