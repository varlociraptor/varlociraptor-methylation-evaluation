# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.


configfile: "config/config.yaml"

include: "rules/get_data.smk"
include: "rules/align_reads.smk"
include: "rules/get_reference_begraph.smk"
include: "rules/human_readable.smk"

scattergather:
    split_candidates=20,

chromosome_conf = config["sample"]

platform = config["data"]
candidate = config["candidate"]




def expand_scatter_plots(platform):
    return expand("results/" + platform + "/{protocol}/scatter_plot_tv.png", protocol=list(config["data"][platform].keys()))

rule all:
    input: 
        expand_scatter_plots("PacBio"),
        # expand_scatter_plots("Nanopore"),
        # expand_scatter_plots("Illumina"),




    
# Just for debugging reasons
rule get_candidate_neighborhood:
    input:
        genome="resources/genome.fasta"
    output:
        "resources/candidate_neighborhood.txt"
    params:
        pipeline_path=config["pipeline_path"],
        chrom=21,
        candidate=candidate,
        left_border=candidate-150,
        right_border=candidate+150,
        candidate_left=candidate-1,
        candidate_right=candidate+1,
    conda:
        "envs/samtools.yaml"
    shell:
        """
        samtools faidx resources/genome.fasta "{params.chrom}:{params.left_border}-{params.candidate_left}" && samtools faidx resources/genome.fasta "{params.chrom}:{params.candidate}-{params.candidate}" && samtools faidx resources/genome.fasta "{params.chrom}:{params.candidate_right}-{params.right_border}"
        """


rule find_candidates:
    input:
        "resources/chromosome.fasta"
    output:
        "resources/candidates.bcf",
    log:
        "logs/find_candidates.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- methylation-candidates {params.pipeline_path}{input} {params.pipeline_path}{output}
        """


rule split_candidates:
    input:
        "resources/candidates.bcf",
    output:
        scatter.split_candidates("resources/candidates_{scatteritem}.bcf")
    log:
        "logs/split_candidates.log",
    conda:
        "envs/rbt.yaml"
    shell:
        "rbt vcf-split {input} {output}"


rule methylDackel:
    input:
        genome="resources/genome.fasta",
        alignment="resources/Illumina/{protocol}/alignment_focused_downsampled_dedup_renamed.bam",
        alignment_index="resources/Illumina/{protocol}/alignment_focused_downsampled_dedup_renamed.bam.bai"
    output:
        "results/Illumina/{protocol}/alignments_CpG.bedGraph",
    conda:
        "envs/methylDackel.yaml"
    log:
        "logs/methylDackel_{protocol}.log",
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """
        MethylDackel extract {input.genome} {input.alignment} -o {params.pipeline_path}/results/Illumina/{wildcards.protocol}/alignments --mergeContext
        """


rule compute_meth_observations:
    input:
        # varlo_build ="resources/{SRA}/build_varlo.txt",
        genome="resources/genome.fasta",
        genome_index="resources/genome.fasta.fai",
        alignments="resources/{platform}/{protocol}/alignment_focused_downsampled_dedup_renamed.bam",
        alignment_index="resources/{platform}/{protocol}/alignment_focused_downsampled_dedup_renamed.bam.bai",
        # alignments="resources/{platform}/{protocol}/alignment_focused_downsampled_dedup_reduced_excert.bam",
        # alignments_index="resources/{platform}/{protocol}/alignment_focused_downsampled_dedup_reduced_excert.bam.bai",
        candidates="resources/candidates_{scatteritem}.bcf"
    output:
        "results/{platform}/{protocol}/normal_{scatteritem}.bcf",
        # "results/{SRA}/normal.bcf",
    log:
        "logs/compute_meth_observations_{platform}{protocol}_{scatteritem}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- preprocess variants {params.pipeline_path}{input.genome} --candidates {params.pipeline_path}{input.candidates} --bam {params.pipeline_path}{input.alignments} --read-type {wildcards.platform} > {params.pipeline_path}{output}
        """





rule call_methylation:
    input:
        preprocess_obs="results/{platform}/{protocol}/normal_{scatteritem}.bcf",
        # preprocess_obs="results/{SRA}/normal.bcf",
        scenario="resources/scenario.yaml",
    output:
        temp("results/{platform}/{protocol}/calls_{scatteritem}.bcf"),
        # "results/{SRA}/calls.bcf",
    log:
        "logs/compute_{platform}{scatteritem}{protocol}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- call variants --omit-strand-bias generic --scenario {params.pipeline_path}{input.scenario} --obs normal={params.pipeline_path}{input.preprocess_obs} > {params.pipeline_path}{output}
        """



rule filter_calls:
    input:
        "results/{platform}/{protocol}/calls_{scatteritem}.bcf",
    output:
        temp("results/{platform}/{protocol}/calls_{scatteritem}.filtered.bcf"),
    log:
        "logs/filter_calls_{platform}{scatteritem}{protocol}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        event="PRESENT"
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- filter-calls control-fdr --mode local-smart {params.pipeline_path}{input} --events {params.event} --fdr 0.01 > {params.pipeline_path}{output}
        """


rule calls_to_vcf:
    input:
        "results/{platform}/{protocol}/calls_{scatteritem}.filtered.bcf",
    output:
        temp("results/{platform}/{protocol}/calls_{scatteritem}.vcf"),
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf_{platform}{scatteritem}{protocol}.log",
    threads: 10
    shell:
        """
        bcftools view --threads {threads} {input} -o {output}
        """


rule gather_calls:
    input:
        gather.split_candidates("results/{{platform}}/{{protocol}}/calls_{scatteritem}.vcf")
    output:
        "results/{platform}/{protocol}/calls.vcf"
    log:
        "logs/gather_calls_{platform}/{protocol}.log",
    shell:
        "cat {input} > {output}"


rule plot_results_Illumina:
    input:
        bedGraph="results/Illumina/{protocol}/alignments_CpG.bedGraph",        
        calls="results/Illumina/{protocol}/calls.vcf",
        # true_meth="resources/HG002/GSM5649437_TruSeq_HG002_LAB01_REP01_filtered.bedGraph"
        true_meth="resources/bed_avg.bedGraph"
    output:
        dv="results/Illumina/{protocol}/scatter_plot_dv.png",
        td="results/Illumina/{protocol}/scatter_plot_td.png",
        tv="results/Illumina/{protocol}/scatter_plot_tv.png",
        dist_td="results/Illumina/{protocol}/scatter_plot_dv_distances.png",
        dist_tv="results/Illumina/{protocol}/scatter_plot_tv_distances.png",
    conda:
        "envs/plot.yaml"
    log:
        "logs/plot_results{protocol}.log",
    script:
        "scripts/scatter_plot_illumina.py"


rule plot_results_PacBio:
    input:
        calls="results/PacBio/{protocol}/calls.vcf",
        # true_meth="resources/HG002/GSM5649437_TruSeq_HG002_LAB01_REP01_filtered.bedGraph"
        true_meth="resources/bed_avg.bedGraph"
    output:
        td="results/PacBio/{protocol}/scatter_plot_td.png",
        tv="results/PacBio/{protocol}/scatter_plot_tv.png",
        dist_tv="results/PacBio/{protocol}/scatter_plot_tv_distances.png",
    conda:
        "envs/plot.yaml"
    log:
        "logs/plot_results{protocol}.log",
    script:
        "scripts/scatter_plot_pacbio.py"


# Gleiche Regel wie PacBio -> zu einer Regel zusammenfassen
rule plot_results_Nanopore:
    input:
        calls="results/Nanopore/{protocol}/calls.vcf",
        # true_meth="resources/HG002/GSM5649437_TruSeq_HG002_LAB01_REP01_filtered.bedGraph"
        true_meth="resources/bed_avg.bedGraph"
    output:
        td="results/Nanopore/{protocol}/scatter_plot_td.png",
        tv="results/Nanopore/{protocol}/scatter_plot_tv.png",
        dist_tv="results/Nanopore/{protocol}/scatter_plot_tv_distances.png",
    conda:
        "envs/plot.yaml"
    log:
        "logs/plot_results{protocol}.log",
    script:
        "scripts/scatter_plot_pacbio.py"
