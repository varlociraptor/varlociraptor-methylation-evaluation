# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.

from pathlib import Path


configfile: "config/config.yaml"


include: "rules/common.smk"
include: "rules/install_software.smk"
include: "rules/get_data.smk"
include: "rules/align_reads.smk"
include: "rules/reference_meth_status.smk"
include: "rules/get_reference_begraph.smk"
include: "rules/human_readable.smk"


scattergather:
    split_candidates=20,


chromosome_conf = config["sample"]
platform = config["data"]
candidate = config["candidate"]


rule all:
    input:
        expand_scatter_plots("PacBio"),
        # expand_scatter_plots("Nanopore"),
        # expand_scatter_plots("Illumina_pe"),


rule find_candidates:
    input:
        expand(
            "resources/chromosome_{chromosome}.fasta",
            chromosome=chr_chromosome,
        ),
    output:
        "resources/{chromosome}/candidates.bcf",
    log:
        "logs/{chromosome}/find_candidates.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- methylation-candidates {params.pipeline_path}{input} {params.pipeline_path}{output}
        """


rule split_candidates:
    input:
        expand(
            "resources/{chro}/candidates.bcf",
            chro=chromosome_conf["chromosome"],
        ),
    output:
        scatter.split_candidates("resources/{{chro}}/candidates_{scatteritem}.bcf"),
    log:
        "logs/{chro}split_candidates.log",
    conda:
        "envs/rbt.yaml"
    shell:
        "rbt vcf-split {input} {output}"


rule compute_meth_observations:
    input:
        chromosome=expand(
            "resources/chromosome_{chromosome}.fasta",
            chromosome=chromosome_conf["chromosome"],
        ),
        genome_index=expand(
            "resources/chromosome_{chromosome}.fasta.fai",
            chromosome=chromosome_conf["chromosome"],
        ),
        alignments="resources/{platform}/{protocol}/alignment_focused_downsampled_dedup_renamed.bam",
        alignment_index="resources/{platform}/{protocol}/alignment_focused_downsampled_dedup_renamed.bam.bai",
        candidates=expand(
            "resources/{chro}/candidates_{{scatteritem}}.bcf",
            chro=chromosome_conf["chromosome"],
        ),
    output:
        "results/{platform}/{protocol}/normal_{scatteritem}.bcf",
    log:
        "logs/compute_meth_observations_{platform}_{protocol}_{scatteritem}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        if [[ "{wildcards.platform}" == "Illumina_pe" || "{wildcards.platform}" == "Illumina_se" ]]; then
            PLATFORM="Illumina"
        else
            PLATFORM="{wildcards.platform}"
        fi
        cargo run --release -- preprocess variants {params.pipeline_path}{input.chromosome} --candidates {params.pipeline_path}{input.candidates} --bam {params.pipeline_path}{input.alignments} --read-type $PLATFORM > {params.pipeline_path}{output}
        """


rule call_methylation:
    input:
        preprocess_obs="results/{platform}/{protocol}/normal_{scatteritem}.bcf",
        scenario="resources/scenario.yaml",
    output:
        temp("results/{platform}/{protocol}/calls_{scatteritem}.bcf"),
    log:
        "logs/call_methylation_{platform}_{protocol}_{scatteritem}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- call variants --omit-strand-bias generic --scenario {params.pipeline_path}{input.scenario} --obs normal={params.pipeline_path}{input.preprocess_obs} > {params.pipeline_path}{output}
        """


rule filter_calls:
    input:
        "results/{platform}/{protocol}/calls_{scatteritem}.bcf",
    output:
        temp("results/{platform}/{protocol}/calls_{scatteritem}.filtered.bcf"),
    log:
        "logs/filter_calls_{platform}_{protocol}_{scatteritem}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        event="PRESENT",
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- filter-calls control-fdr --mode local-smart {params.pipeline_path}{input} --events {params.event} --fdr 0.01 > {params.pipeline_path}{output}
        """


rule calls_to_vcf:
    input:
        "results/{platform}/{protocol}/calls_{scatteritem}.filtered.bcf",
    output:
        temp("results/{platform}/{protocol}/calls_{scatteritem}.vcf"),
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf_{platform}_{protocol}_{scatteritem}.log",
    threads: 10
    shell:
        """
        bcftools view --threads {threads} {input} -o {output}
        """


rule gather_calls:
    input:
        gather.split_candidates(
            "results/{{platform}}/{{protocol}}/calls_{scatteritem}.vcf"
        ),
    output:
        "results/{platform}/{protocol}/calls.vcf",
    log:
        "logs/gather_calls_{platform}_{protocol}.log",
    conda:
        "envs/cat.yaml"
    shell:
        "cat {input} > {output}"


rule plot_results:
    input:
        bedGraph="results/{platform}/{protocol}/alignments_CpG.combined.bed",
        calls="results/{platform}/{protocol}/calls.vcf",
        true_meth=expand(
            "resources/bed_avg_{chromosome}.bedGraph",
            chromosome=chromosome_conf["chromosome"],
        ),
    output:
        dv="results/{platform}/{protocol}/scatter_plot_dv.png",
        td="results/{platform}/{protocol}/scatter_plot_td.png",
        tv="results/{platform}/{protocol}/scatter_plot_tv.png",
        dist_td="results/{platform}/{protocol}/scatter_plot_dv_distances.png",
        dist_tv="results/{platform}/{protocol}/scatter_plot_tv_distances.png",
    conda:
        "envs/plot.yaml"
    log:
        "logs/plot_results_{platform}_{protocol}.log",
    script:
        "scripts/scatter_plot.py"
