# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.


configfile: "config/config.yaml"


read_type = config["read_type"]
sample_config = config["sample"]
accession = config["accession"]


aligned_bam_reads = (
    "resources/example_new/aligned-reads-pacbio.bam"
    if read_type == "PacBio"
    else "resources/example_new/aligned-reads-illumina.bam"
)

aligned_bam_reads_index = (
    "resources/example_new/aligned-reads-pacbio-sorted.bam.bai"
    if read_type == "PacBio"
    else "resources/example_new/aligned-reads-illumina-sorted.bam.bai"
)

aligned_sam_reads = (
    "resources/example_new/aligned-reads-pacbio.sam"
    if read_type == "PacBio"
    else "resources/example_new/aligned-reads-illumina.sam"
)

aligned_bam_reads_sorted = (
    "resources/example_new/aligned-reads-pacbio-sorted.bam"
    if read_type == "PacBio"
    else "resources/example_new/aligned-reads-illumina-sorted.bam"
)

aligned_sam_reads_sorted = (
    "resources/example_new/aligned-reads-pacbio-sorted.sam"
    if read_type == "PacBio"
    else "resources/example_new/aligned-reads-illumina-sorted.sam"
)


rule all:
    input:
        dv="results/scatter_plot_dv.png",
        tv="results/scatter_plot_tv.png",
        td="results/scatter_plot_td.png"


rule genome_index:
    input:
        "resources/example_new/genome.fasta",
    output:
        "resources/example_new/genome.fasta.fai",
    log:
        "logs/genome_index.log",
    conda:
        "envs/samtools.yaml"
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        samtools faidx {params.pipeline_path}{input}
        """


rule find_candidates:
    input:
        "resources/example_new/genome.fasta",
    output:
        "resources/example_new/candidates.bcf",
    log:
        "logs/find_candidates.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- methylation-candidates {params.pipeline_path}{input} {params.pipeline_path}{output}
        """

# Unused
rule candidates_to_vcf:
    input:
        "resources/example_new/candidates.bcf",
    output:
        "resources/example_new/candidates.vcf",
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf.log",
    shell:
        """
        bcftools view {input} > {output}
        """


rule fake_meth_data_methylFASTQ:
    input:
        fasta="resources/example_new/genome.fasta",
    output:
        "resources/example_new/genome_se_f150r150_dir.fastq",
        "resources/example_new/genome_se_f150r150_dir.ch3"
    log:
        "logs/fake_meth_data.log",
    params:
        pipeline_path=config["pipeline_path"],
        methylFastQ_path=config["methylFastQ_path"],
    conda:
        "envs/methylFastQ.yaml"
    shell:
        """
        python {params.methylFastQ_path}src/methylFASTQ.py -i {input} -o {params.pipeline_path}resources/example_new --seq single_end --chh 0.0 --chg 0.0 --cg 0.5 --snp 0.0 --error 0.0 --coverage 50
        """




rule align_reads:
    input:
        fasta="resources/example_new/genome.fasta",
        reads1="resources/example_new/genome_se_f150r150_dir.fastq",
    output:
        aligned_bam_reads,
    conda:
        "envs/bwa-meth.yaml"
    log:
        "logs/align_reads.log",
    shell:
        """
        bwameth.py index-mem2 {input.fasta}
        bwameth.py --threads 10 --reference {input.fasta} {input.reads1}   | samtools view -S -b - > {output}
        """


rule aligned_reads_sorted_sam:
    input:
        aligned_bam_reads,
    output:
        sam_reads=aligned_sam_reads,
        sam_sorted=aligned_sam_reads_sorted,
    log:
        "logs/aligned_reads_sorted_sam.log",
    conda:
        "envs/samtools.yaml"
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """ 
        samtools view -bS {params.pipeline_path}{input} > {params.pipeline_path}/{output.sam_reads}    
        samtools sort {output.sam_reads} -o {output.sam_sorted}    
        """

rule sort_aligned_reads:
    input:
        aligned_bam_reads,
    output:
        aligned_bam_reads_sorted,
    log:
        "logs/sort_aligned_reads.log",
    conda:
        "envs/samtools.yaml"
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """
        samtools sort {input} -o {output}    
        """

rule aligned_reads_index:
    input:
        aligned_bam_reads_sorted,
    output:
        aligned_bam_reads_index,
    log:
        "logs/aligned_reads_to_bam.log",
    conda:
        "envs/samtools.yaml"
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """
        samtools index {params.pipeline_path}/{input}
        """

rule methylDackel:
    input:
        genome="resources/example_new/genome.fasta",
        alignment=aligned_bam_reads_sorted,
        alignment_index=aligned_bam_reads_index
    output:
        "results/alignments_CpG.bedGraph",
    conda:
        "envs/methylDackel.yaml"
    log:
        "logs/methylDackel.log",
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """
        MethylDackel extract {input.genome} {input.alignment} -o {params.pipeline_path}/results/alignments --mergeContext
        """


rule compute_meth_observations:
    input:
        genome="resources/example_new/genome.fasta",
        genome_index="resources/example_new/genome.fasta.fai",
        alignments=aligned_bam_reads_sorted,
        alignments_index=aligned_bam_reads_index,
        candidates="resources/example_new/candidates.bcf",
    output:
        "results/normal.bcf",
    log:
        "logs/copute.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        read_type=config["read_type"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- preprocess variants {params.pipeline_path}{input.genome} --candidates {params.pipeline_path}{input.candidates} --bam {params.pipeline_path}{input.alignments} --read-type {params.read_type} > {params.pipeline_path}{output}
        """

# Unused
rule observations_to_vcf:
    input:
        "results/normal.bcf",
    output:
        "results/normal.vcf",
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf.log",
    shell:
        """
        bcftools view {input} > {output}
        """


rule call_methylation:
    input:
        preprocess_obs="results/normal.bcf",
        scenario="resources/example_new/scenario.yaml",
    output:
        "results/calls.bcf",
    log:
        "logs/copute.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        read_type=config["read_type"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- call variants --omit-strand-bias generic --scenario {params.pipeline_path}{input.scenario} --obs normal={params.pipeline_path}{input.preprocess_obs} > {params.pipeline_path}{output}
        """


rule calls_to_vcf:
    input:
        "results/calls.bcf",
    output:
        "results/calls.vcf",
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf.log",
    shell:
        """
        bcftools view {input} -o {output}
        """

rule plot_results:
    input:
        bedGraph="results/alignments_CpG.bedGraph",
        calls="results/calls.vcf",
        true_meth="resources/example_new/genome_se_f150r150_dir.ch3"
        # true_meth="resources/example_new/genome_pe_f150r150_dir.ch3"
    output:
        dv="results/scatter_plot_dv.png",
        tv="results/scatter_plot_tv.png",
        td="results/scatter_plot_td.png"
    conda:
        "envs/altair.yaml"
    script:
        "scripts/scatter_plot.py"

rule delete:
    shell:
        """
        find resources/example_new/ -type f -not \( -name 'genome.fasta' -or -name 'scenario.yaml' \) -delete && rm -r results
        """
