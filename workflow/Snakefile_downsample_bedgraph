# Main entrypoint of the workflow.
# Please follow the best practices:
# https://snakemake.readthedocs.io/en/stable/snakefiles/best_practices.html,
# in particular regarding the standardized folder structure mentioned there.


configfile: "config/config.yaml"

include: "rules/get_data.smk"
include: "rules/align_reads.smk"
include: "rules/get_reference_begraph.smk"
include: "rules/human_readable.smk"

scattergather:
    split_candidates=20,

read_type = config["read_type"]
chromosome_conf = config["sample"]
platform = config["platform"]



rule all:
    input:
        # dv=expand("results/{platform}/scatter_plot_dv.png", platform=platform),
        # tv=expand("results/{platform}/scatter_plot_tv.png", platform=platform),
        td=expand("results/{platform}/scatter_plot_td.png", platform=platform.keys()),


rule find_candidates:
    input:
        "resources/chromosome_{params.chromosome}.fasta"
    output:
        "resources/candidates.bcf",
    log:
        "logs/find_candidates.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        chromosome=chromosome_conf["chromosome"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run -- methylation-candidates {params.pipeline_path}{input} {params.pipeline_path}{output}
        """


rule split_candidates:
    input:
        "resources/candidates.bcf",
    output:
        scatter.split_candidates("resources/candidates_{scatteritem}.bcf")
    log:
        "logs/split_candidates.log",
    conda:
        "envs/rbt.yaml"
    shell:
        "rbt vcf-split {input} {output}"


rule methylDackel:
    input:
        genome="resources/genome.fasta",
        alignment="resources/{platform}/{SRA}/alignment_focused_dedup.bam",
        alignment_index="resources/{platform}/{SRA}/alignment_focused_dedup.bam.bai",
        # alignment="resources/{platform}/alignment_focused_downsampled_dedup.bam",
        # alignment_index="resources/{platform}/alignment_focused_downsampled_dedup.bam.bai"
    output:
        # "results/{platform}/alignments_CpG.bedGraph",
        "resources/{platform}/{SRA}/alignments_CpG.bedGraph",
    conda:
        "envs/methylDackel.yaml"
    log:
        "logs/methylDackel_{platform}{SRA}.log",
    params:
        pipeline_path=config["pipeline_path"],
    shell:
        """
        MethylDackel extract {input.genome} {input.alignment} -o {params.pipeline_path}/resources/{wildcards.platform}/{wildcards.SRA}/alignments --mergeContext
        """
        # MethylDackel extract {input.genome} {input.alignment} -o {params.pipeline_path}/results/{wildcards.platform}/alignments --mergeContext


def get_platform_sras(wildcards):
    platform = wildcards.platform
    accession_numbers = config["platform"][platform]
    return ["resources/" + platform + "/" + SRA + "/alignments_CpG.bedGraph" for SRA in accession_numbers]

rule combineReplicates:
    input:
        get_platform_sras
    output:
        "resources/{platform}/alignments_CpG.bedGraph",
    log:
        "logs/combineReplicates{platform}.log",
    params:
        pipeline_path=config["pipeline_path"],
    script:
        "scripts/combineReplicates.py"

rule downsample:
    input:
        "resources/{platform}/alignments_CpG.bedGraph",
    output:
        "results/{platform}/alignments_CpG_downsampled.bedGraph",
    log:
        "logs/downsample{platform}.log",
    params:
        pipeline_path=config["pipeline_path"],
        methylationTools=config["methylationTools_path"],
    shell:
        """
        cat {params.pipeline_path}{input} | grep -v track | {params.methylationTools}downsample_methylKit.py --fraction 0.99 --bedGraph > {params.pipeline_path}{output}
        """


# rule build_varlo:
#     output:
#         temp("resources/{SRA}/build_varlo.txt"),
#     log:
#         "logs/build_varlo{SRA}.log",
#     conda:
#         "envs/varlociraptor.yaml"
#     params:
#         varlo_path=config["varlo_path"],
#         pipeline_path=config["pipeline_path"],
#         read_type=config["read_type"],
#     shell:
#         """ 
#         cd {params.varlo_path}
#         cargo build
#         touch {params.pipeline_path}{output}
#         """

rule compute_meth_observations:
    input:
        # varlo_build ="resources/{SRA}/build_varlo.txt",
        genome="resources/genome.fasta",
        genome_index="resources/genome.fasta.fai",
        alignments="resources/{platform}/alignment_focused_downsampled_dedup.bam",
        alignments_index="resources/{platform}/alignment_focused_downsampled_dedup.bam.bai",
        candidates="resources/candidates_{scatteritem}.bcf"
    output:
        temp("results/{platform}/normal_{scatteritem}.bcf"),
        # "results/{SRA}/normal.bcf",
    log:
        "logs/compute_meth_observations_{platform}_{scatteritem}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        read_type=config["read_type"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- preprocess variants {params.pipeline_path}{input.genome} --candidates {params.pipeline_path}{input.candidates} --bam {params.pipeline_path}{input.alignments} --read-type {params.read_type} > {params.pipeline_path}{output}
        """


rule call_methylation:
    input:
        preprocess_obs="results/{platform}/normal_{scatteritem}.bcf",
        # preprocess_obs="results/{SRA}/normal.bcf",
        scenario="resources/scenario.yaml",
    output:
        temp("results/{platform}/calls_{scatteritem}.bcf"),
        # "results/{SRA}/calls.bcf",
    log:
        "logs/compute_{scatteritem}{platform}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        read_type=config["read_type"],
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- call variants --omit-strand-bias generic --scenario {params.pipeline_path}{input.scenario} --obs normal={params.pipeline_path}{input.preprocess_obs} > {params.pipeline_path}{output}
        """



rule filter_calls:
    input:
        "results/{platform}/calls_{scatteritem}.bcf",
    output:
        temp("results/{platform}/calls_{scatteritem}.filtered.bcf"),

        # "results/{platform}/calls.bcf",
    log:
        "logs/filter_calls_{scatteritem}{platform}.log",
    conda:
        "envs/varlociraptor.yaml"
    params:
        varlo_path=config["varlo_path"],
        pipeline_path=config["pipeline_path"],
        event="PRESENT"
    shell:
        """ 
        cd {params.varlo_path}
        cargo run --release -- filter-calls control-fdr --mode local-smart {params.pipeline_path}{input} --events {params.event} --fdr 0.01 > {params.pipeline_path}{output}
        """



rule calls_to_vcf:
    input:
        # "results/{platform}/calls_{scatteritem}.bcf",
        "results/{platform}/calls_{scatteritem}.filtered.bcf",

        # "results/{platform}/calls_{scatteritem}.bcf",
        # "results/{platform}/calls.bcf",
    output:
        temp("results/{platform}/calls_{scatteritem}.vcf"),
        # "results/{platform}/calls.vcf",
    conda:
        "envs/samtools.yaml"
    log:
        "logs/convert_to_vcf_{scatteritem}{platform}.log",
    threads: 10
    shell:
        """
        bcftools view --threads {threads} {input} -o {output}
        """



rule gather_calls:
    input:
        gather.split_candidates("results/{{platform}}/calls_{scatteritem}.vcf")
    output:
        "results/{platform}/calls.vcf"
    log:
        "logs/gather_calls_{platform}.log",
    shell:
        "cat {input} > {output}"



rule plot_results:
    input:
        # bedGraph="results/{platform}/alignments_CpG.bedGraph",
        bedGraph="results/{platform}/alignments_CpG_downsampled.bedGraph",
        
        calls="results/{platform}/calls.vcf",
        # true_meth="resources/HG002/GSM5649437_TruSeq_HG002_LAB01_REP01_filtered.bedGraph"
        true_meth="resources/bed_avg.bedGraph"
    output:
        # dv="results/{platform}/scatter_plot_dv.png",
        td="results/{platform}/scatter_plot_td.png",
        # tv="results/{platform}/scatter_plot_tv.png",
    conda:
        "envs/plot.yaml"
    log:
        "logs/plot_results{platform}.log",
    script:
        "scripts/scatter_plot_real_downsample_bedgraph.py"
